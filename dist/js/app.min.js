/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals console */

// import './rAF-polyfill.js';

var _state = __webpack_require__(3);

var _state2 = _interopRequireDefault(_state);

var _canvasSetup = __webpack_require__(4);

var _canvasSetup2 = _interopRequireDefault(_canvasSetup);

var _addUser = __webpack_require__(6);

var _addUser2 = _interopRequireDefault(_addUser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// let renderer;
var app = {
    state: _state2.default

    // draw() {
    // let time;
    // let controls = document.getElementById('controls');
    // time = new Date();
    // controls.innerText = `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}.${time.getMilliseconds()}`;

    // // this.renderer.clear();
    // if (this.state.nodes.length) {
    //     this.state.nodes.forEach(node => {
    //         // check if node.userID matches userID
    //         // if so, use coords for circle; get node color from state.user[userID].color
    //     })
    // }
    // },
};

Promise.resolve(app).then(_addUser2.default).then(_canvasSetup2.default)
// .then(() => animate())
.then(function () {
    return console.log("state", _state2.default);
}).catch(function (thrown) {
    return console.error('%cAn error occurred:', 'font-weight:bold', thrown);
});

// function animate() {
//     app.draw();
//     requestAnimationFrame(animate);
// }
function output(str) {
    document.getElementById('output').innerHTML += '<br>' + str;
}
window.getState = function () {
    return console.log('app.state', app.state);
};
/*
TODO: get touch-add working
-- create node using user's color
-- save node info to nodes array
TODO: share state over websockets
TODO: update state object when socket info comes in
 */

/***/ }),
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.guid = guid;
exports.randomHex = randomHex;
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    // return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}

function randomHex() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// The Truth!

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    nodes: [],
    connections: [],
    users: {},
    currentUser: {
        userID: '',
        color: ''
    }
};

/*
e.g. 
{
    nodes: [{
        userID: 'guid',
        coords: [{ x:0, y:0 }]
    }],
    connections: [{
        e1: { x:0, y:0 },
        e2: { x:0, y:0 },
    }],
    users: {
        guid: {
            color: ''
        }
    }
}
 */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*  */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = canvasSetup;

var _spawnNode = __webpack_require__(7);

var _spawnNode2 = _interopRequireDefault(_spawnNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var canvas = void 0;function canvasSetup(app) {
    canvas = new fabric.Canvas('stage');

    fabric.Group.prototype.hasControls = false;
    canvas.selection = false;

    window.addEventListener('resize', resizeCanvas, false);
    resizeCanvas();
    app.resizeCanvas = resizeCanvas;
    app.canvas = canvas;

    canvas.on({
        'mouse:down': function mouseDown(event) {
            return (0, _spawnNode2.default)(app, event);
        }
    });

    return app;
}

function resizeCanvas() {
    canvas.setHeight(window.innerHeight);
    canvas.setWidth(window.innerWidth);
    canvas.renderAll();
}
// export default function canvasSetup(app) {
//     let canvas = document.getElementById('stage');
//     app.renderer = new Renderer(canvas);

//     return app;
// }

/***/ }),
/* 5 */,
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = addUser;

var _utils = __webpack_require__(2);

function addUser(app) {
    var userID = (0, _utils.guid)();
    var color = (0, _utils.randomHex)();
    app.state.users[userID] = { color: color };

    app.state.currentUser = {
        userID: userID, color: color
    };

    return app;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = spawnNode;
var nodeRadius = 50;

function spawnNode(app, event) {
    var _ref = event.e.touches ? event.e.touches[0] : event.e,
        pageX = _ref.pageX,
        pageY = _ref.pageY;

    if (!event.target) {
        var offset = -20;
        var centered = {
            x: pageX - nodeRadius,
            y: pageY - nodeRadius
        };
        addCircle({
            x: centered.x,
            y: centered.y,
            color: app.state.currentUser.color,
            canvas: app.canvas
        });
    }
}

function addCircle(_ref2) {
    var x = _ref2.x,
        y = _ref2.y,
        color = _ref2.color,
        canvas = _ref2.canvas;

    // console.log("x, y, color, canvas", x, y, color, canvas);
    var circle = new fabric.Circle({
        left: x,
        top: y,
        radius: nodeRadius,
        fill: color,
        hasControls: false
    });
    canvas.add(circle);
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZDYwZmM2NDc3ZjBmNTJjZmU1NmQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY2xpZW50L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY2xpZW50L3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2NsaWVudC9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jbGllbnQvY2FudmFzLXNldHVwLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2NsaWVudC9hZGQtdXNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jbGllbnQvc3Bhd24tbm9kZS5qcyJdLCJuYW1lcyI6WyJhcHAiLCJzdGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVycm9yIiwidGhyb3duIiwib3V0cHV0Iiwic3RyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsIndpbmRvdyIsImdldFN0YXRlIiwiZ3VpZCIsInJhbmRvbUhleCIsInM0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJub2RlcyIsImNvbm5lY3Rpb25zIiwidXNlcnMiLCJjdXJyZW50VXNlciIsInVzZXJJRCIsImNvbG9yIiwiY2FudmFzU2V0dXAiLCJjYW52YXMiLCJmYWJyaWMiLCJDYW52YXMiLCJHcm91cCIsInByb3RvdHlwZSIsImhhc0NvbnRyb2xzIiwic2VsZWN0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2l6ZUNhbnZhcyIsIm9uIiwiZXZlbnQiLCJzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsInNldFdpZHRoIiwiaW5uZXJXaWR0aCIsInJlbmRlckFsbCIsImFkZFVzZXIiLCJzcGF3bk5vZGUiLCJub2RlUmFkaXVzIiwiZSIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidGFyZ2V0Iiwib2Zmc2V0IiwiY2VudGVyZWQiLCJ4IiwieSIsImFkZENpcmNsZSIsImNpcmNsZSIsIkNpcmNsZSIsImxlZnQiLCJ0b3AiLCJyYWRpdXMiLCJmaWxsIiwiYWRkIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDN0RBO0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTtBQUNBLElBQUlBLE1BQU07QUFDTkM7O0FBRUE7QUFDSTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNKO0FBaEJNLENBQVY7O0FBbUJBQyxRQUFRQyxPQUFSLENBQWdCSCxHQUFoQixFQUNLSSxJQURMLG9CQUVLQSxJQUZMO0FBR0k7QUFISixDQUlLQSxJQUpMLENBSVU7QUFBQSxXQUFNQyxRQUFRQyxHQUFSLENBQVksT0FBWixrQkFBTjtBQUFBLENBSlYsRUFLS0MsS0FMTCxDQUtXO0FBQUEsV0FBVUYsUUFBUUcsS0FBUixDQUFjLHNCQUFkLEVBQXNDLGtCQUF0QyxFQUEwREMsTUFBMUQsQ0FBVjtBQUFBLENBTFg7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxNQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNqQkMsYUFBU0MsY0FBVCxDQUF3QixRQUF4QixFQUFr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dUNWLE1BQU1TLENBRDFCO0FBQUEsUUFDcENFLEtBRG9DLFFBQ3BDQSxLQURvQztBQUFBLFFBQzdCQyxLQUQ2QixRQUM3QkEsS0FENkI7O0FBRTFDLFFBQUksQ0FBQ1osTUFBTWEsTUFBWCxFQUFtQjtBQUNmLFlBQUlDLFNBQVMsQ0FBQyxFQUFkO0FBQ0EsWUFBSUMsV0FBVztBQUNYQyxlQUFJTCxRQUFRSCxVQUREO0FBRVhTLGVBQUlMLFFBQVFKO0FBRkQsU0FBZjtBQUlBVSxrQkFBVTtBQUNORixlQUFHRCxTQUFTQyxDQUROO0FBRU5DLGVBQUdGLFNBQVNFLENBRk47QUFHTjdCLG1CQUFPOUIsSUFBSUMsS0FBSixDQUFVMkIsV0FBVixDQUFzQkUsS0FIdkI7QUFJTkUsb0JBQVFoQyxJQUFJZ0M7QUFKTixTQUFWO0FBTUg7QUFDSjs7QUFFRCxTQUFTNEIsU0FBVCxRQUEwQztBQUFBLFFBQXRCRixDQUFzQixTQUF0QkEsQ0FBc0I7QUFBQSxRQUFuQkMsQ0FBbUIsU0FBbkJBLENBQW1CO0FBQUEsUUFBaEI3QixLQUFnQixTQUFoQkEsS0FBZ0I7QUFBQSxRQUFURSxNQUFTLFNBQVRBLE1BQVM7O0FBQ3RDO0FBQ0EsUUFBSTZCLFNBQVMsSUFBSTVCLE9BQU82QixNQUFYLENBQWtCO0FBQzNCQyxjQUFNTCxDQURxQjtBQUUzQk0sYUFBS0wsQ0FGc0I7QUFHM0JNLGdCQUFRZixVQUhtQjtBQUkzQmdCLGNBQU1wQyxLQUpxQjtBQUszQk8scUJBQWE7QUFMYyxLQUFsQixDQUFiO0FBT0FMLFdBQU9tQyxHQUFQLENBQVdOLE1BQVg7QUFDSCxDIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBkNjBmYzY0NzdmMGY1MmNmZTU2ZCIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFscyBjb25zb2xlICovXG5cbi8vIGltcG9ydCAnLi9yQUYtcG9seWZpbGwuanMnO1xuaW1wb3J0IHN0YXRlIGZyb20gJy4vc3RhdGUuanMnO1xuaW1wb3J0IGNhbnZhc1NldHVwIGZyb20gJy4vY2FudmFzLXNldHVwLmpzJztcbmltcG9ydCBhZGRVc2VyIGZyb20gJy4vYWRkLXVzZXIuanMnO1xuXG4vLyBsZXQgcmVuZGVyZXI7XG5sZXQgYXBwID0ge1xuICAgIHN0YXRlLFxuXG4gICAgLy8gZHJhdygpIHtcbiAgICAgICAgLy8gbGV0IHRpbWU7XG4gICAgICAgIC8vIGxldCBjb250cm9scyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9scycpO1xuICAgICAgICAvLyB0aW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgLy8gY29udHJvbHMuaW5uZXJUZXh0ID0gYCR7dGltZS5nZXRIb3VycygpfToke3RpbWUuZ2V0TWludXRlcygpfToke3RpbWUuZ2V0U2Vjb25kcygpfS4ke3RpbWUuZ2V0TWlsbGlzZWNvbmRzKCl9YDtcbiAgICAgICAgXG4gICAgICAgIC8vIC8vIHRoaXMucmVuZGVyZXIuY2xlYXIoKTtcbiAgICAgICAgLy8gaWYgKHRoaXMuc3RhdGUubm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIC8vICAgICB0aGlzLnN0YXRlLm5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgLy8gY2hlY2sgaWYgbm9kZS51c2VySUQgbWF0Y2hlcyB1c2VySURcbiAgICAgICAgLy8gICAgICAgICAvLyBpZiBzbywgdXNlIGNvb3JkcyBmb3IgY2lyY2xlOyBnZXQgbm9kZSBjb2xvciBmcm9tIHN0YXRlLnVzZXJbdXNlcklEXS5jb2xvclxuICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgLy8gfVxuICAgIC8vIH0sXG59O1xuXG5Qcm9taXNlLnJlc29sdmUoYXBwKVxuICAgIC50aGVuKGFkZFVzZXIpXG4gICAgLnRoZW4oY2FudmFzU2V0dXApXG4gICAgLy8gLnRoZW4oKCkgPT4gYW5pbWF0ZSgpKVxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKFwic3RhdGVcIiwgc3RhdGUpKVxuICAgIC5jYXRjaCh0aHJvd24gPT4gY29uc29sZS5lcnJvcignJWNBbiBlcnJvciBvY2N1cnJlZDonLCAnZm9udC13ZWlnaHQ6Ym9sZCcsIHRocm93bikpXG47XG5cbi8vIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4vLyAgICAgYXBwLmRyYXcoKTtcbi8vICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4vLyB9XG5mdW5jdGlvbiBvdXRwdXQoc3RyKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ291dHB1dCcpLmlubmVySFRNTCArPSBgPGJyPiR7c3RyfWA7XG59XG53aW5kb3cuZ2V0U3RhdGUgPSAoKSA9PiBjb25zb2xlLmxvZygnYXBwLnN0YXRlJywgYXBwLnN0YXRlKTtcbi8qXG5UT0RPOiBnZXQgdG91Y2gtYWRkIHdvcmtpbmdcbi0tIGNyZWF0ZSBub2RlIHVzaW5nIHVzZXIncyBjb2xvclxuLS0gc2F2ZSBub2RlIGluZm8gdG8gbm9kZXMgYXJyYXlcblRPRE86IHNoYXJlIHN0YXRlIG92ZXIgd2Vic29ja2V0c1xuVE9ETzogdXBkYXRlIHN0YXRlIG9iamVjdCB3aGVuIHNvY2tldCBpbmZvIGNvbWVzIGluXG4gKi9cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JpcHRzL2NsaWVudC9tYWluLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBndWlkKCkge1xuICAgIGZ1bmN0aW9uIHM0KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIC8vIHJldHVybiBzNCgpICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyBzNCgpICsgczQoKTtcbiAgICByZXR1cm4gYCR7czQoKX0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9LSR7czQoKX0ke3M0KCl9JHtzNCgpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21IZXgoKSB7XG4gICAgcmV0dXJuICcjJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNjc3NzIxNSkudG9TdHJpbmcoMTYpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjcmlwdHMvY2xpZW50L3V0aWxzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRoZSBUcnV0aCFcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBub2RlczogW10sXG4gICAgY29ubmVjdGlvbnM6IFtdLFxuICAgIHVzZXJzOiB7fSxcbiAgICBjdXJyZW50VXNlcjoge1xuICAgICAgICB1c2VySUQ6ICcnLFxuICAgICAgICBjb2xvcjogJydcbiAgICB9XG59O1xuXG4vKlxuZS5nLiBcbntcbiAgICBub2RlczogW3tcbiAgICAgICAgdXNlcklEOiAnZ3VpZCcsXG4gICAgICAgIGNvb3JkczogW3sgeDowLCB5OjAgfV1cbiAgICB9XSxcbiAgICBjb25uZWN0aW9uczogW3tcbiAgICAgICAgZTE6IHsgeDowLCB5OjAgfSxcbiAgICAgICAgZTI6IHsgeDowLCB5OjAgfSxcbiAgICB9XSxcbiAgICB1c2Vyczoge1xuICAgICAgICBndWlkOiB7XG4gICAgICAgICAgICBjb2xvcjogJydcbiAgICAgICAgfVxuICAgIH1cbn1cbiAqL1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjcmlwdHMvY2xpZW50L3N0YXRlLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiAgKi9cbmltcG9ydCBzcGF3bk5vZGUgZnJvbSAnLi9zcGF3bi1ub2RlLmpzJztcblxubGV0IGNhbnZhcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FudmFzU2V0dXAoYXBwKSB7XG4gICAgY2FudmFzID0gbmV3IGZhYnJpYy5DYW52YXMoJ3N0YWdlJyk7XG5cbiAgICBmYWJyaWMuR3JvdXAucHJvdG90eXBlLmhhc0NvbnRyb2xzID0gZmFsc2U7XG4gICAgY2FudmFzLnNlbGVjdGlvbiA9IGZhbHNlO1xuICAgIFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDYW52YXMsIGZhbHNlKTtcbiAgICByZXNpemVDYW52YXMoKTtcbiAgICBhcHAucmVzaXplQ2FudmFzID0gcmVzaXplQ2FudmFzO1xuICAgIGFwcC5jYW52YXMgPSBjYW52YXM7XG5cbiAgICBjYW52YXMub24oe1xuICAgICAgICAnbW91c2U6ZG93bic6IGV2ZW50ID0+IHNwYXduTm9kZShhcHAsIGV2ZW50KVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFwcDtcbn1cblxuZnVuY3Rpb24gcmVzaXplQ2FudmFzKCkge1xuICAgIGNhbnZhcy5zZXRIZWlnaHQod2luZG93LmlubmVySGVpZ2h0KTtcbiAgICBjYW52YXMuc2V0V2lkdGgod2luZG93LmlubmVyV2lkdGgpO1xuICAgIGNhbnZhcy5yZW5kZXJBbGwoKTtcbn1cbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbnZhc1NldHVwKGFwcCkge1xuLy8gICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhZ2UnKTtcbi8vICAgICBhcHAucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoY2FudmFzKTtcblxuLy8gICAgIHJldHVybiBhcHA7XG4vLyB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2NyaXB0cy9jbGllbnQvY2FudmFzLXNldHVwLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGd1aWQsIHJhbmRvbUhleCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRVc2VyKGFwcCkge1xuICAgIGxldCB1c2VySUQgPSBndWlkKCk7XG4gICAgbGV0IGNvbG9yID0gcmFuZG9tSGV4KCk7XG4gICAgYXBwLnN0YXRlLnVzZXJzW3VzZXJJRF0gPSB7IGNvbG9yIH07XG5cbiAgICBhcHAuc3RhdGUuY3VycmVudFVzZXIgPSB7XG4gICAgICAgIHVzZXJJRCwgY29sb3JcbiAgICB9O1xuXG4gICAgcmV0dXJuIGFwcDtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2NyaXB0cy9jbGllbnQvYWRkLXVzZXIuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3Qgbm9kZVJhZGl1cyA9IDUwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcGF3bk5vZGUoYXBwLCBldmVudCkge1xuICAgIGxldCB7IHBhZ2VYLCBwYWdlWSB9ID0gZXZlbnQuZS50b3VjaGVzID8gZXZlbnQuZS50b3VjaGVzWzBdIDogZXZlbnQuZTtcbiAgICBpZiAoIWV2ZW50LnRhcmdldCkge1xuICAgICAgICBsZXQgb2Zmc2V0ID0gLTIwO1xuICAgICAgICBsZXQgY2VudGVyZWQgPSB7XG4gICAgICAgICAgICB4OiAocGFnZVggLSBub2RlUmFkaXVzKSxcbiAgICAgICAgICAgIHk6IChwYWdlWSAtIG5vZGVSYWRpdXMpLFxuICAgICAgICB9O1xuICAgICAgICBhZGRDaXJjbGUoe1xuICAgICAgICAgICAgeDogY2VudGVyZWQueCxcbiAgICAgICAgICAgIHk6IGNlbnRlcmVkLnksXG4gICAgICAgICAgICBjb2xvcjogYXBwLnN0YXRlLmN1cnJlbnRVc2VyLmNvbG9yLFxuICAgICAgICAgICAgY2FudmFzOiBhcHAuY2FudmFzXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkQ2lyY2xlKHt4LCB5LCBjb2xvciwgY2FudmFzfSkge1xuICAgIC8vIGNvbnNvbGUubG9nKFwieCwgeSwgY29sb3IsIGNhbnZhc1wiLCB4LCB5LCBjb2xvciwgY2FudmFzKTtcbiAgICBsZXQgY2lyY2xlID0gbmV3IGZhYnJpYy5DaXJjbGUoe1xuICAgICAgICBsZWZ0OiB4LFxuICAgICAgICB0b3A6IHksXG4gICAgICAgIHJhZGl1czogbm9kZVJhZGl1cyxcbiAgICAgICAgZmlsbDogY29sb3IsXG4gICAgICAgIGhhc0NvbnRyb2xzOiBmYWxzZSxcbiAgICB9KTtcbiAgICBjYW52YXMuYWRkKGNpcmNsZSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2NyaXB0cy9jbGllbnQvc3Bhd24tbm9kZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=