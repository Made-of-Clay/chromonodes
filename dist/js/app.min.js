/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals console */

__webpack_require__(1);

var _utils = __webpack_require__(2);

var _state = __webpack_require__(3);

var _state2 = _interopRequireDefault(_state);

var _canvasSetup = __webpack_require__(4);

var _canvasSetup2 = _interopRequireDefault(_canvasSetup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = {
    state: _state2.default,

    draw: function draw() {
        var time = void 0;
        var controls = document.getElementById('controls');
        time = new Date();
        controls.innerText = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '.' + time.getMilliseconds();
        // testo(this);
        if (this.canvas) {
            this.canvas.renderAll();
        }
    }
};
function testo(app) {
    window.rect = new fabric.Rect({ // TODO: move this logic to more appropriate place
        left: 100,
        top: 100,
        fill: 'red',
        width: 60,
        height: 60,
        hasControls: false
    });

    app.canvas.add(rect);
    console.log("app.canvas", app.canvas);
    app.canvas.on({
        // 'object:moving': ({target:{top, left}}) => console.log(top, left),
        // 'mouse:down': event => console.log(event),
        // 'mouse:down': event => addRect(app.canvas, event.e.screenX, event.e.screenY, event),
        'mouse:down': function mouseDown(event) {
            console.log('event', event);
            if (event.e.touches) {
                output('' + JSON.stringify(event.e.touches));
            }
            output('mousedown: x' + event.e.pageX + ' y' + event.e.pageY);
            if (!event.target) {
                addRect(app.canvas, event.e.pageX, event.e.pageY);
            }
        }
    });
    window.addEventListener('touchend', creation);
    window.addEventListener('mouseup', creation);
    function creation(event) {
        var str = 'norm pageX: ' + event.pageX;
        if (event.touches) {
            str += '<br> norm touches: ' + JSON.stringify(event.touches);
        }
        output(str);
    }
}
function output(str) {
    document.getElementById('output').innerHTML += '<br>' + str;
}
function addRect(canvas, left, top) {
    console.log('arguments', arguments);
    var opts = {
        left: left,
        top: top,
        fill: 'blue',
        width: 60,
        height: 60,
        hasControls: false
    };
    var newRect = new fabric.Rect(opts);
    canvas.add(newRect);
}

Promise.resolve(app).then(addUser).then(_canvasSetup2.default).then(function (app) {
    return testo(app);
}).then(function () {
    return animate();
}).then(function () {
    return console.log("state", _state2.default);
}).catch(function (thrown) {
    return console.error('%cAn error occurred:', 'font-weight:bold', thrown);
});

function animate() {
    app.draw();
    requestAnimationFrame(animate);
}
function addUser(app) {
    var userID = (0, _utils.guid)();
    app.state.users[userID] = {
        color: (0, _utils.randomHex)()
    };
    return app;
}

/*
TODO: get touch-add working
-- create node using user's color
-- save node info to nodes array
TODO: share state over websockets
TODO: update state object when socket info comes in
 */

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
    // https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    var lastTime = 0;
    var vendors = ['webkit', 'moz'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };

    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
})();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.guid = guid;
exports.randomHex = randomHex;
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    // return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}

function randomHex() {
    return '0x' + Math.floor(Math.random() * 16777215).toString(16);
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// The Truth!

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    nodes: [],
    connections: [],
    users: {}
};

/*
e.g. 
{
    nodes: [{
        userID: 'guid',
        coords: [{ x:0, y:0 }]
    }],
    connections: [{
        e1: { x:0, y:0 },
        e2: { x:0, y:0 },
    }],
    users: {
        guid: {
            color: ''
        }
    }
}
 */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals PIXI */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = canvasSetup;
function canvasSetup(app) {
    app.canvas = new fabric.Canvas('stage');
    app.canvas.setHeight(window.innerHeight);
    app.canvas.setWidth(window.innerWidth);
    app.canvas.renderAll();
    // let renderer = PIXI.autoDetectRenderer(400, 400, {
    //     transparent: true
    // });
    // renderer.view.id = 'playground';
    // app.renderer = renderer;

    // const wrapper = document.getElementById('wrapper');
    // wrapper.appendChild(renderer.view);

    // let stage = new PIXI.Container();
    // app.stage = stage;

    // renderer.render(stage);

    return app;
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTc4MzU4YzMyZTQ2YjE2MmNiMzkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY2xpZW50L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY2xpZW50L3JBRi1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NyaXB0cy9jbGllbnQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjcmlwdHMvY2xpZW50L3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3JpcHRzL2NsaWVudC9jYW52YXMtc2V0dXAuanMiXSwibmFtZXMiOlsiYXBwIiwic3RhdGUiLCJkcmF3IiwidGltZSIsImNvbnRyb2xzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIkRhdGUiLCJpbm5lclRleHQiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiY2FudmFzIiwicmVuZGVyQWxsIiwidGVzdG8iLCJ3aW5kb3ciLCJyZWN0IiwiZmFicmljIiwiUmVjdCIsImxlZnQiLCJ0b3AiLCJmaWxsIiwid2lkdGgiLCJoZWlnaHQiLCJoYXNDb250cm9scyIsImFkZCIsImNvbnNvbGUiLCJsb2ciLCJvbiIsImV2ZW50IiwiZSIsInRvdWNoZXMiLCJvdXRwdXQiLCJKU09OIiwic3RyaW5naWZ5IiwicGFnZVgiLCJwYWdlWSIsInRhcmdldCIsImFkZFJlY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiY3JlYXRpb24iLCJzdHIiLCJpbm5lckhUTUwiLCJhcmd1bWVudHMiLCJvcHRzIiwibmV3UmVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImFkZFVzZXIiLCJhbmltYXRlIiwiY2F0Y2giLCJlcnJvciIsInRocm93biIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZXJJRCIsInVzZXJzIiwiY29sb3IiLCJsYXN0VGltZSIsInZlbmRvcnMiLCJ4IiwibGVuZ3RoIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJjdXJyVGltZSIsImdldFRpbWUiLCJ0aW1lVG9DYWxsIiwiTWF0aCIsIm1heCIsImlkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImd1aWQiLCJyYW5kb21IZXgiLCJzNCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJub2RlcyIsImNvbm5lY3Rpb25zIiwiY2FudmFzU2V0dXAiLCJDYW52YXMiLCJzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsInNldFdpZHRoIiwiaW5uZXJXaWR0aCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7OztBQzdEQTtBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLE1BQU07QUFDTkMsMEJBRE07O0FBR05DLFFBSE0sa0JBR0M7QUFDSCxZQUFJQyxhQUFKO0FBQ0EsWUFBSUMsV0FBV0MsU0FBU0MsY0FBVCxDQUF3QixVQUF4QixDQUFmO0FBQ0FILGVBQU8sSUFBSUksSUFBSixFQUFQO0FBQ0FILGlCQUFTSSxTQUFULEdBQXdCTCxLQUFLTSxRQUFMLEVBQXhCLFNBQTJDTixLQUFLTyxVQUFMLEVBQTNDLFNBQWdFUCxLQUFLUSxVQUFMLEVBQWhFLFNBQXFGUixL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UUFBSWEsTUFBSixDQUFXMEUsUUFBWCxDQUFvQnZFLE9BQU93RSxVQUEzQjtBQUNBeEYsUUFBSWEsTUFBSixDQUFXQyxTQUFYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsV0FBT2QsR0FBUDtBQUNILEMiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDk3ODM1OGMzMmU0NmIxNjJjYjM5IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWxzIGNvbnNvbGUgKi9cblxuaW1wb3J0ICcuL3JBRi1wb2x5ZmlsbC5qcyc7XG5pbXBvcnQgeyBndWlkLCByYW5kb21IZXggfSBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlLmpzJztcbmltcG9ydCBjYW52YXNTZXR1cCBmcm9tICcuL2NhbnZhcy1zZXR1cC5qcyc7XG5cbmxldCBhcHAgPSB7XG4gICAgc3RhdGUsXG5cbiAgICBkcmF3KCkge1xuICAgICAgICBsZXQgdGltZTtcbiAgICAgICAgbGV0IGNvbnRyb2xzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRyb2xzJyk7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb250cm9scy5pbm5lclRleHQgPSBgJHt0aW1lLmdldEhvdXJzKCl9OiR7dGltZS5nZXRNaW51dGVzKCl9OiR7dGltZS5nZXRTZWNvbmRzKCl9LiR7dGltZS5nZXRNaWxsaXNlY29uZHMoKX1gO1xuICAgICAgICAvLyB0ZXN0byh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZnVuY3Rpb24gdGVzdG8oYXBwKSB7XG4gICAgd2luZG93LnJlY3QgPSBuZXcgZmFicmljLlJlY3QoeyAvLyBUT0RPOiBtb3ZlIHRoaXMgbG9naWMgdG8gbW9yZSBhcHByb3ByaWF0ZSBwbGFjZVxuICAgICAgICBsZWZ0OiAxMDAsXG4gICAgICAgIHRvcDogMTAwLFxuICAgICAgICBmaWxsOiAncmVkJyxcbiAgICAgICAgd2lkdGg6IDYwLFxuICAgICAgICBoZWlnaHQ6IDYwLFxuICAgICAgICBoYXNDb250cm9sczogZmFsc2VcbiAgICB9KTtcblxuICAgIGFwcC5jYW52YXMuYWRkKHJlY3QpO1xuY29uc29sZS5sb2coXCJhcHAuY2FudmFzXCIsIGFwcC5jYW52YXMpO1xuICAgIGFwcC5jYW52YXMub24oe1xuICAgICAgICAvLyAnb2JqZWN0Om1vdmluZyc6ICh7dGFyZ2V0Ont0b3AsIGxlZnR9fSkgPT4gY29uc29sZS5sb2codG9wLCBsZWZ0KSxcbiAgICAgICAgLy8gJ21vdXNlOmRvd24nOiBldmVudCA9PiBjb25zb2xlLmxvZyhldmVudCksXG4gICAgICAgIC8vICdtb3VzZTpkb3duJzogZXZlbnQgPT4gYWRkUmVjdChhcHAuY2FudmFzLCBldmVudC5lLnNjcmVlblgsIGV2ZW50LmUuc2NyZWVuWSwgZXZlbnQpLFxuICAgICAgICAnbW91c2U6ZG93bic6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdldmVudCcsIGV2ZW50KTtcbiAgICAgICAgICAgIGlmIChldmVudC5lLnRvdWNoZXMpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQoYCR7SlNPTi5zdHJpbmdpZnkoZXZlbnQuZS50b3VjaGVzKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dChgbW91c2Vkb3duOiB4JHtldmVudC5lLnBhZ2VYfSB5JHtldmVudC5lLnBhZ2VZfWApO1xuICAgICAgICAgICAgaWYgKCFldmVudC50YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBhZGRSZWN0KGFwcC5jYW52YXMsIGV2ZW50LmUucGFnZVgsIGV2ZW50LmUucGFnZVkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgY3JlYXRpb24pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgY3JlYXRpb24pO1xuICAgIGZ1bmN0aW9uIGNyZWF0aW9uKGV2ZW50KSB7XG4gICAgICAgIGxldCBzdHIgPSBgbm9ybSBwYWdlWDogJHtldmVudC5wYWdlWH1gO1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICAgICAgc3RyICs9IGA8YnI+IG5vcm0gdG91Y2hlczogJHtKU09OLnN0cmluZ2lmeShldmVudC50b3VjaGVzKX1gO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dChzdHIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG91dHB1dChzdHIpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3V0cHV0JykuaW5uZXJIVE1MICs9IGA8YnI+JHtzdHJ9YDtcbn1cbmZ1bmN0aW9uIGFkZFJlY3QoY2FudmFzLCBsZWZ0LCB0b3ApIHtcbiAgICBjb25zb2xlLmxvZygnYXJndW1lbnRzJywgYXJndW1lbnRzKTtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgICAgbGVmdCxcbiAgICAgICAgdG9wLFxuICAgICAgICBmaWxsOiAnYmx1ZScsXG4gICAgICAgIHdpZHRoOiA2MCxcbiAgICAgICAgaGVpZ2h0OiA2MCxcbiAgICAgICAgaGFzQ29udHJvbHM6IGZhbHNlXG4gICAgfTtcbiAgICBsZXQgbmV3UmVjdCA9IG5ldyBmYWJyaWMuUmVjdChvcHRzKTtcbiAgICBjYW52YXMuYWRkKG5ld1JlY3QpO1xufVxuXG5Qcm9taXNlLnJlc29sdmUoYXBwKVxuICAgIC50aGVuKGFkZFVzZXIpXG4gICAgLnRoZW4oY2FudmFzU2V0dXApXG4gICAgLnRoZW4oKGFwcCkgPT4gdGVzdG8oYXBwKSlcbiAgICAudGhlbigoKSA9PiBhbmltYXRlKCkpXG4gICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coXCJzdGF0ZVwiLCBzdGF0ZSkpXG4gICAgLmNhdGNoKHRocm93biA9PiBjb25zb2xlLmVycm9yKCclY0FuIGVycm9yIG9jY3VycmVkOicsICdmb250LXdlaWdodDpib2xkJywgdGhyb3duKSlcbjtcblxuZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICBhcHAuZHJhdygpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbn1cbmZ1bmN0aW9uIGFkZFVzZXIoYXBwKSB7XG4gICAgbGV0IHVzZXJJRCA9IGd1aWQoKTtcbiAgICBhcHAuc3RhdGUudXNlcnNbdXNlcklEXSA9IHtcbiAgICAgICAgY29sb3I6IHJhbmRvbUhleCgpXG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xufVxuXG4vKlxuVE9ETzogZ2V0IHRvdWNoLWFkZCB3b3JraW5nXG4tLSBjcmVhdGUgbm9kZSB1c2luZyB1c2VyJ3MgY29sb3Jcbi0tIHNhdmUgbm9kZSBpbmZvIHRvIG5vZGVzIGFycmF5XG5UT0RPOiBzaGFyZSBzdGF0ZSBvdmVyIHdlYnNvY2tldHNcblRPRE86IHVwZGF0ZSBzdGF0ZSBvYmplY3Qgd2hlbiBzb2NrZXQgaW5mbyBjb21lcyBpblxuICovXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2NyaXB0cy9jbGllbnQvbWFpbi5qcyIsIihmdW5jdGlvbigpIHtcbiAgICAvLyBodHRwczovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICAgIGZvcih2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9XG4gICAgICAgICAgd2luZG93W3ZlbmRvcnNbeF0rJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W3ZlbmRvcnNbeF0rJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgIH1cblxuICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgICAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sXG4gICAgICAgICAgICAgIHRpbWVUb0NhbGwpO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH07XG5cbiAgICBpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIH07XG59KCkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JpcHRzL2NsaWVudC9yQUYtcG9seWZpbGwuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGd1aWQoKSB7XG4gICAgZnVuY3Rpb24gczQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKVxuICAgICAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xuICAgIHJldHVybiBgJHtzNCgpfSR7czQoKX0tJHtzNCgpfS0ke3M0KCl9LSR7czQoKX0tJHtzNCgpfSR7czQoKX0ke3M0KCl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUhleCgpIHtcbiAgICByZXR1cm4gJzB4JyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxNjc3NzIxNSkudG9TdHJpbmcoMTYpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NjcmlwdHMvY2xpZW50L3V0aWxzLmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRoZSBUcnV0aCFcbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBub2RlczogW10sXG4gICAgY29ubmVjdGlvbnM6IFtdLFxuICAgIHVzZXJzOiB7fVxufTtcblxuLypcbmUuZy4gXG57XG4gICAgbm9kZXM6IFt7XG4gICAgICAgIHVzZXJJRDogJ2d1aWQnLFxuICAgICAgICBjb29yZHM6IFt7IHg6MCwgeTowIH1dXG4gICAgfV0sXG4gICAgY29ubmVjdGlvbnM6IFt7XG4gICAgICAgIGUxOiB7IHg6MCwgeTowIH0sXG4gICAgICAgIGUyOiB7IHg6MCwgeTowIH0sXG4gICAgfV0sXG4gICAgdXNlcnM6IHtcbiAgICAgICAgZ3VpZDoge1xuICAgICAgICAgICAgY29sb3I6ICcnXG4gICAgICAgIH1cbiAgICB9XG59XG4gKi9cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zY3JpcHRzL2NsaWVudC9zdGF0ZS5qcyIsIlwidXNlIHN0cmljdFwiO1xuLyogZ2xvYmFscyBQSVhJICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbnZhc1NldHVwKGFwcCkge1xuICAgIGFwcC5jYW52YXMgPSBuZXcgZmFicmljLkNhbnZhcygnc3RhZ2UnKTtcbiAgICBhcHAuY2FudmFzLnNldEhlaWdodCh3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIGFwcC5jYW52YXMuc2V0V2lkdGgod2luZG93LmlubmVyV2lkdGgpO1xuICAgIGFwcC5jYW52YXMucmVuZGVyQWxsKCk7XG4gICAgLy8gbGV0IHJlbmRlcmVyID0gUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIoNDAwLCA0MDAsIHtcbiAgICAvLyAgICAgdHJhbnNwYXJlbnQ6IHRydWVcbiAgICAvLyB9KTtcbiAgICAvLyByZW5kZXJlci52aWV3LmlkID0gJ3BsYXlncm91bmQnO1xuICAgIC8vIGFwcC5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG4gICAgLy8gY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cmFwcGVyJyk7XG4gICAgLy8gd3JhcHBlci5hcHBlbmRDaGlsZChyZW5kZXJlci52aWV3KTtcblxuICAgIC8vIGxldCBzdGFnZSA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgIC8vIGFwcC5zdGFnZSA9IHN0YWdlO1xuXG4gICAgLy8gcmVuZGVyZXIucmVuZGVyKHN0YWdlKTtcblxuICAgIHJldHVybiBhcHA7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2NyaXB0cy9jbGllbnQvY2FudmFzLXNldHVwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==