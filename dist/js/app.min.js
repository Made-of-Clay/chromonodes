/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals console */

// import './rAF-polyfill.js';

var _state = __webpack_require__(1);

var _state2 = _interopRequireDefault(_state);

var _canvasSetup = __webpack_require__(2);

var _canvasSetup2 = _interopRequireDefault(_canvasSetup);

var _addUser = __webpack_require__(5);

var _addUser2 = _interopRequireDefault(_addUser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// let renderer;
var app = {
    state: _state2.default

    // draw() {
    // let time;
    // let controls = document.getElementById('controls');
    // time = new Date();
    // controls.innerText = `${time.getHours()}:${time.getMinutes()}:${time.getSeconds()}.${time.getMilliseconds()}`;

    // // this.renderer.clear();
    // if (this.state.nodes.length) {
    //     this.state.nodes.forEach(node => {
    //         // check if node.userID matches userID
    //         // if so, use coords for circle; get node color from state.user[userID].color
    //     })
    // }
    // },
};

Promise.resolve(app).then(_addUser2.default).then(_canvasSetup2.default)
// .then(() => animate())
.then(function () {
    return console.log("state", _state2.default);
}).catch(function (thrown) {
    return console.error('%cAn error occurred:', 'font-weight:bold', thrown);
});

// function animate() {
//     app.draw();
//     requestAnimationFrame(animate);
// }
function output(str) {
    document.getElementById('output').innerHTML += '<br>' + str;
}
window.getState = function () {
    return console.log('app.state', app.state);
};
/*
TODO: get touch-add working
-- create node using user's color
-- save node info to nodes array
TODO: share state over websockets
TODO: update state object when socket info comes in
 */

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// The Truth!

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    nodes: [],
    connections: [],
    users: {},
    currentUser: {
        userID: '',
        color: ''
    }
};

/*
e.g. 
{
    nodes: [{
        userID: 'guid',
        coords: [{ x:0, y:0 }],
        nodeID: 'guid'
    }],
    connections: [{
        e1: { x:0, y:0 },
        e2: { x:0, y:0 },
    }],
    users: {
        guid: {
            color: ''
        }
    }
}
 */

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*  */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = canvasSetup;

var _spawnNode = __webpack_require__(3);

var _spawnNode2 = _interopRequireDefault(_spawnNode);

var _findNearestNodes = __webpack_require__(4);

var _findNearestNodes2 = _interopRequireDefault(_findNearestNodes);

var _drawLine = __webpack_require__(7);

var _drawLine2 = _interopRequireDefault(_drawLine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var canvas = void 0;function canvasSetup(app) {
    var nearestNodes = new _findNearestNodes2.default(app);
    canvas = new fabric.Canvas('stage');

    fabric.Group.prototype.hasControls = false;
    canvas.selection = false;

    window.addEventListener('resize', resizeCanvas, false);
    resizeCanvas();
    app.resizeCanvas = resizeCanvas;
    app.canvas = canvas;

    canvas.on({
        'mouse:down': function mouseDown(event) {
            var node = (0, _spawnNode2.default)(app, event);
            if (node) {
                var nn = nearestNodes.findClosestTo(node);
                console.log('closest', nn.closest, 'nextClosest', nn.nextClosest);
                // draw lines
                // draw line from node.xy to closest.xy
                // draw line from node.xy to nextClosest.xy
                // save drawn lines to connections in state
                (0, _drawLine2.default)(app, event, node, nn.closest);
                (0, _drawLine2.default)(app, event, node, nn.nextClosest);
            }
        }
    });

    return app;
}

function resizeCanvas() {
    canvas.setHeight(window.innerHeight);
    canvas.setWidth(window.innerWidth);
    canvas.renderAll();
}
// export default function canvasSetup(app) {
//     let canvas = document.getElementById('stage');
//     app.renderer = new Renderer(canvas);

//     return app;
// }

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = spawnNode;

var _utils = __webpack_require__(6);

var nodeRadius = 50;

function spawnNode(app, event) {
    var _ref = event.e.touches ? event.e.touches[0] : event.e,
        pageX = _ref.pageX,
        pageY = _ref.pageY;

    if (!event.target) {
        var offset = -20;
        var nodeID = (0, _utils.guid)();
        var centered = {
            x: pageX - nodeRadius,
            y: pageY - nodeRadius
        };
        addCircle({
            x: centered.x,
            y: centered.y,
            color: app.state.currentUser.color,
            canvas: app.canvas,
            nodeID: nodeID
        });
        var currentUser = app.state.currentUser;
        app.state.nodes.push({
            color: currentUser.color,
            coords: centered,
            userID: currentUser.userID,
            nodeID: nodeID
        });
        return { centered: centered, nodeID: nodeID };
    }
}

function addCircle(_ref2) {
    var x = _ref2.x,
        y = _ref2.y,
        color = _ref2.color,
        canvas = _ref2.canvas,
        nodeID = _ref2.nodeID;

    // console.log("x, y, color, canvas", x, y, color, canvas);
    var circle = new fabric.Circle({
        left: x,
        top: y,
        radius: nodeRadius,
        fill: color,
        hasControls: false,
        id: nodeID
    });
    canvas.add(circle);
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals Math */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(6);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var emptyCoords = function emptyCoords() {
    return { x: null, y: null };
};
var closest = emptyCoords();
var nextClosest = emptyCoords();

var NearestNodes = function () {
    function NearestNodes(app) {
        _classCallCheck(this, NearestNodes);

        // this.app = app;
        this.nodes = app.state.nodes;
    }

    // only using getter/setter pattern in case I pass object to set coords and it has more than x/y


    _createClass(NearestNodes, [{
        key: "findClosestTo",
        value: function findClosestTo(_ref) {
            var _this = this;

            var coords = _ref.centered,
                nodeID = _ref.nodeID;

            this.nodes.forEach(function (tmpNode) {
                if (nodeID === tmpNode.nodeID) return;

                if ((0, _utils.coordsAreNull)(_this.closest)) {
                    _this.closest = Object.assign({ nodeID: tmpNode.nodeID }, tmpNode.coords);
                } else if (distance(coords, _this.closest) > distance(coords, tmpNode.coords)) {
                    _this.nextClosest = _this.closest;
                    _this.closest = Object.assign({ nodeID: tmpNode.nodeID }, tmpNode.coords);
                } else if ((0, _utils.coordsAreNull)(_this.nextClosest) || distance(coords, _this.nextClosest) > distance(coords, tmpNode.coords)) {

                    _this.nextClosest = Object.assign({ nodeID: tmpNode.nodeID }, tmpNode.coords);
                }
            });
            return {
                closest: this.closest,
                nextClosest: this.nextClosest
            };
        }
    }, {
        key: "closest",
        get: function get() {
            return closest;
        },
        set: function set(_ref2) {
            var x = _ref2.x,
                y = _ref2.y;

            closest.x = x;
            closest.y = y;
        }
    }, {
        key: "nextClosest",
        get: function get() {
            return nextClosest;
        },
        set: function set(_ref3) {
            var x = _ref3.x,
                y = _ref3.y;

            nextClosest.x = x;
            nextClosest.y = y;
        }
    }]);

    return NearestNodes;
}();

exports.default = NearestNodes;


function distance(_ref4, _ref5) {
    var x1 = _ref4.x,
        y1 = _ref4.y;
    var x2 = _ref5.x,
        y2 = _ref5.y;

    return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = addUser;

var _utils = __webpack_require__(6);

function addUser(app) {
    var userID = (0, _utils.guid)();
    var color = (0, _utils.randomHex)();
    app.state.users[userID] = { color: color };

    app.state.currentUser = {
        userID: userID, color: color
    };

    return app;
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.guid = guid;
exports.randomHex = randomHex;
exports.getDistance = getDistance;
exports.isNull = isNull;
exports.coordsAreNull = coordsAreNull;
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    // return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}

function randomHex() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

function getDistance(coords1, coords2) {
    return Math.sqrt(Math.pow(coords1.x - coords2.x, 2) + Math.pow(coords1.y - coords2.y, 2));
}

function isNull(value) {
    return value === null;
}

function coordsAreNull(obj) {
    return isNull(obj.x) && isNull(obj.y);
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals console */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = drawLine;

var _utils = __webpack_require__(6);

function drawLine(app, event, node1, node2) {
    console.log('drawLine args', arguments);
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,