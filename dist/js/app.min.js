/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals console */

__webpack_require__(1);

var _utils = __webpack_require__(2);

var _state = __webpack_require__(3);

var _state2 = _interopRequireDefault(_state);

var _canvasSetup = __webpack_require__(4);

var _canvasSetup2 = _interopRequireDefault(_canvasSetup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = {
    state: _state2.default,

    draw: function draw() {
        var time = void 0;
        var controls = document.getElementById('controls');
        time = new Date();
        controls.innerText = time.getHours() + ':' + time.getMinutes() + ':' + time.getSeconds() + '.' + time.getMilliseconds();
        // testo(this);
        if (this.canvas) {
            this.canvas.renderAll();
        }
    }
};
function testo(app) {
    window.rect = new fabric.Rect({ // TODO: move this logic to more appropriate place
        left: 100,
        top: 100,
        fill: 'red',
        width: 60,
        height: 60,
        hasControls: false
    });

    app.canvas.add(rect);
    console.log("app.canvas", app.canvas);
    app.canvas.on({
        // 'object:moving': ({target:{top, left}}) => console.log(top, left),
        // 'mouse:down': event => console.log(event),
        // 'mouse:down': event => addRect(app.canvas, event.e.screenX, event.e.screenY, event),
        'mouse:down': function mouseDown(event) {
            console.log('event', event);
            if (!event.target) {
                addRect(app.canvas, event.e.pageX, event.e.pageY);
            }
        }
    });
}
function addRect(canvas, left, top) {
    console.log('arguments', arguments);
    var opts = {
        left: left,
        top: top,
        fill: 'blue',
        width: 60,
        height: 60,
        hasControls: false
    };
    var newRect = new fabric.Rect(opts);
    canvas.add(newRect);
}

Promise.resolve(app).then(addUser).then(_canvasSetup2.default).then(function (app) {
    return testo(app);
}).then(function () {
    return animate();
}).then(function () {
    return console.log("state", _state2.default);
}).catch(function (thrown) {
    return console.error('%cAn error occurred:', 'font-weight:bold', thrown);
});

function animate() {
    app.draw();
    requestAnimationFrame(animate);
}
function addUser(app) {
    var userID = (0, _utils.guid)();
    app.state.users[userID] = {
        color: (0, _utils.randomHex)()
    };
    return app;
}

/*
TODO: get touch-add working
-- create node using user's color
-- save node info to nodes array
TODO: share state over websockets
TODO: update state object when socket info comes in
 */

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
    // https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    var lastTime = 0;
    var vendors = ['webkit', 'moz'];
    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        var id = window.setTimeout(function () {
            callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };

    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
        clearTimeout(id);
    };
})();

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.guid = guid;
exports.randomHex = randomHex;
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }
    // return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    return "" + s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}

function randomHex() {
    return '0x' + Math.floor(Math.random() * 16777215).toString(16);
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// The Truth!

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    nodes: [],
    connections: [],
    users: {}
};

/*
e.g. 
{
    nodes: [{
        userID: 'guid',
        coords: [{ x:0, y:0 }]
    }],
    connections: [{
        e1: { x:0, y:0 },
        e2: { x:0, y:0 },
    }],
    users: {
        guid: {
            color: ''
        }
    }
}
 */

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* globals PIXI */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = canvasSetup;
function canvasSetup(app) {
    app.canvas = new fabric.Canvas('stage');
    app.canvas.setHeight(window.innerHeight);
    app.canvas.setWidth(window.innerWidth);
    app.canvas.renderAll();
    // let renderer = PIXI.autoDetectRenderer(400, 400, {
    //     transparent: true
    // });
    // renderer.view.id = 'playground';
    // app.renderer = renderer;

    // const wrapper = document.getElementById('wrapper');
    // wrapper.appendChild(renderer.view);

    // let stage = new PIXI.Container();
    // app.stage = stage;

    // renderer.render(stage);

    return app;
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,